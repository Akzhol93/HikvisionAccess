# Generated by Django 5.0.6 on 2024-07-18 01:30

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(max_length=25)),
                ('port_no', models.IntegerField()),
                ('channel_id', models.IntegerField()),
                ('name', models.CharField(max_length=25)),
                ('login', models.CharField(max_length=25)),
                ('password', models.CharField(max_length=25)),
                ('max_record_num', models.IntegerField(blank=True, default=None, null=True)),
                ('max_results', models.IntegerField(blank=True, default=None, null=True)),
            ],
            options={
                'verbose_name': '(Basic) Device',
                'verbose_name_plural': '(Basic) Devices',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bin', models.CharField(unique=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', message='IIN or BIN must be 12 digits')])),
                ('number', models.PositiveSmallIntegerField()),
                ('name', models.CharField()),
            ],
            options={
                'verbose_name': '(Handbook) Organization',
                'verbose_name_plural': '(Handbook) Organizations',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': '(Handbook) Region',
                'verbose_name_plural': '(Handbook) Regions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccessEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipAddress', models.CharField(max_length=15)),
                ('portNo', models.IntegerField()),
                ('protocol', models.CharField(max_length=10)),
                ('macAddress', models.CharField(max_length=17)),
                ('channelID', models.IntegerField()),
                ('dateTime', models.DateTimeField()),
                ('activePostCount', models.IntegerField()),
                ('eventType', models.CharField(max_length=50)),
                ('eventState', models.CharField(max_length=20)),
                ('eventDescription', models.CharField(max_length=100)),
                ('deviceName', models.CharField(max_length=50)),
                ('majorEventType', models.IntegerField()),
                ('subEventType', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('cardReaderKind', models.IntegerField()),
                ('cardReaderNo', models.IntegerField()),
                ('verifyNo', models.IntegerField()),
                ('employeeNoString', models.CharField(max_length=50)),
                ('serialNo', models.IntegerField()),
                ('userType', models.CharField(max_length=20)),
                ('currentVerifyMode', models.CharField(max_length=20)),
                ('frontSerialNo', models.IntegerField()),
                ('attendanceStatus', models.CharField(max_length=20)),
                ('label', models.CharField(max_length=50)),
                ('statusValue', models.IntegerField()),
                ('mask', models.CharField(max_length=5)),
                ('purePwdVerifyEnable', models.BooleanField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.device')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App.organization'),
        ),
        migrations.AddField(
            model_name='organization',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='App.region'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()])),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('FIO', models.CharField(max_length=55, verbose_name='FIO')),
                ('phone', models.CharField(max_length=15, verbose_name='phone')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('organization', models.ManyToManyField(blank=True, to='App.organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
    ]
